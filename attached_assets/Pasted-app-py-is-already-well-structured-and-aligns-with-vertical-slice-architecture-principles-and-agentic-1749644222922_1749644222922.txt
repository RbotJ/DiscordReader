app.py is already well-structured and aligns with vertical-slice architecture principles and agentic coding practicesIDD AI-friendly code ar‚Ä¶IDD agentic codingaplus planning. Here are some suggestions to improve clarity, maintainability, and robustness:

‚úÖ General Strengths
Centralized blueprint registration (register_all_blueprints) follows clean vertical-slice conventions.

Flask app factory pattern is correctly applied (create_app).

Discord bot startup is thoughtfully wrapped in a background thread and Flask context.

Logging is consistent and informative.

Socket.IO events are minimal but functional.

üõ†Ô∏è Suggested Improvements
1. Blueprint Import Consolidation
Move the blueprint import list to a dedicated module (features/__init__.py or features/routes.py) like this:

python
Copy
Edit
blueprints = [
    ("market", "features.market.api_routes", "bp"),
    ("execution", "features.execution.api_routes", "bp"),
    # ...
]
Then in register_all_blueprints:

python
Copy
Edit
for name, module_path, attr in blueprints:
    try:
        mod = __import__(module_path, fromlist=[attr])
        bp = getattr(mod, attr)
        app.register_blueprint(bp)
        logging.info(f"Registered {name} blueprint successfully")
    except (ImportError, AttributeError) as e:
        logging.warning(f"Failed to register {name} blueprint: {e}")
‚úÖ Benefits: DRY, easier to manage changes or add new features.

2. Make Bot Startup Optional
Wrap bot start logic in an environment flag:

python
Copy
Edit
if os.getenv("ENABLE_DISCORD_BOT", "true").lower() == "true":
    start_discord_bot_background(app)
‚úÖ Benefit: More control in CI/staging environments.

3. Separate socketio Instance
To prevent tight coupling with global state:

python
Copy
Edit
def create_app(socketio_instance):
    ...
    socketio_instance.init_app(app, ...)
Then use:

python
Copy
Edit
socketio = SocketIO()
app = create_app(socketio)
‚úÖ Benefit: Improves testability and avoids side effects in testing modules.

4. Environment Validation
Add a check for required env vars:

python
Copy
Edit
REQUIRED_ENV_VARS = ["DATABASE_URL", "ALPACA_API_KEY", "ALPACA_API_SECRET"]
missing_vars = [var for var in REQUIRED_ENV_VARS if not os.getenv(var)]
if missing_vars:
    logging.warning(f"Missing required environment vars: {', '.join(missing_vars)}")
‚úÖ Benefit: Early detection of misconfigurations.

5. Use importlib for Dynamic Imports
For blueprint loading and bot modules, importlib.import_module is safer and avoids __import__ edge cases.

6. Alpaca Configuration Flag
Expose trading/live data toggle:

python
Copy
Edit
app.config["ALPACA_USE_LIVE_DATA"] = os.getenv("USE_LIVE_DATA", "false").lower() == "true"
‚úÖ Benefit: Makes switching between paper/live seamless.

7. Refactor Discord Bot Setup
Break run_bot() into subfunctions:

python
Copy
Edit
def validate_token():
def init_services(app):
def start_bot(bot, token):
‚úÖ Benefit: Easier testing, debugging, and reuse.

8. Add Robust Error Pages
For / and /health, add fallback logic or templates that handle errors gracefully.

Let me know if you‚Äôd like me to rewrite any part of the file with these suggestions applied.