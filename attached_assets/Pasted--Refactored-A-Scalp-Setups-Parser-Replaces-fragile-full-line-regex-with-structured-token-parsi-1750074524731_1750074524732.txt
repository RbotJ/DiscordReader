"""
Refactored A+ Scalp Setups Parser
- Replaces fragile full-line regex with structured token parsing
- Creates a simplified, resilient internal model per trade setup
- Enforces one labeled setup per ticker/day
- Logs audit info for missing or extra setups
"""

import logging
import re
from datetime import date
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)

# ----- Data Model -----

@dataclass
class TradeSetup:
    id: str
    ticker: str
    trading_day: date
    index: int
    trigger_level: float
    target_prices: List[float]
    direction: str                      # 'long' or 'short'
    label: Optional[str]                # Human-readable label like "AggressiveBreakout"
    keywords: List[str]                 # e.g., ["breakout", "aggressive"]
    emoji_hint: Optional[str]          # e.g., '🔼'
    raw_line: str

# ----- Utility Functions -----

PRICE_LIST_RE = re.compile(r'(\d{2,5}\.\d{2})(?:\s*,\s*\d{2,5}\.\d{2})*')

KEYWORDS_BY_LABEL = {
    'Rejection': ['rejection', 'reject'],
    'AggressiveBreakout': ['aggressive', 'breakout'],
    'ConservativeBreakout': ['conservative', 'breakout'],
    'AggressiveBreakdown': ['aggressive', 'breakdown'],
    'ConservativeBreakdown': ['conservative', 'breakdown'],
    'BounceZone': ['bounce', 'zone'],
    'Bias': ['bias']
}

DIRECTION_HINTS = {
    '🔻': 'short',
    '🔼': 'long',
    '❌': 'short',# usually implies rejection down
    '🔄': 'long'  # usually implies bounce up
}


def parse_price_list(text: str) -> List[float]:
    try:
        return [float(p.strip()) for p in text.split(',') if p.strip()]
    except ValueError:
        logger.warning(f"Failed to parse price list from: {text}")
        return []


def classify_setup(line: str) -> Tuple[Optional[str], List[str]]:
    tokens = line.lower()
    matched_labels = []
    for label, keywords in KEYWORDS_BY_LABEL.items():
        if all(k in tokens for k in keywords):
            matched_labels.append(label)
    return (matched_labels[0] if matched_labels else None, matched_labels)


def extract_setup_line(line: str, ticker: str, trading_day: date, index: int) -> Optional[TradeSetup]:
    numbers = re.findall(r'\d{2,5}\.\d{2}', line)
    if len(numbers) < 2:
        logger.warning(f"Not enough prices in line: {line}")
        return None

    trigger = float(numbers[0])
    targets = [float(p) for p in numbers[1:]]

    emoji = next((icon for icon in DIRECTION_HINTS if icon in line), None)
    direction = DIRECTION_HINTS.get(emoji, 'long')

    label, keywords = classify_setup(line)
    setup_id = f"{trading_day.strftime('%Y%m%d')}_{ticker}_Setup_{index+1}"

    return TradeSetup(
        id=setup_id,
        ticker=ticker,
        trading_day=trading_day,
        index=index + 1,
        trigger_level=trigger,
        target_prices=targets,
        direction=direction,
        label=label,
        keywords=keywords,
        emoji_hint=emoji,
        raw_line=line
    )


# ----- Main Entry Point -----

def parse_ticker_section(ticker: str, content: str, trading_day: date) -> List[TradeSetup]:
    lines = [line.strip() for line in content.splitlines() if line.strip() and not line.startswith('⚠️')]
    setups = []

    for i, line in enumerate(lines):
        setup = extract_setup_line(line, ticker, trading_day, i)
        if setup:
            setups.append(setup)
        else:
            logger.debug(f"Skipped line {i}: {line}")

    logger.info(f"Parsed {len(setups)} setups for {ticker} on {trading_day}")
    return setups


# Optional: define expected profile audit
EXPECTED_PROFILES = [
    'Rejection', 'AggressiveBreakdown', 'ConservativeBreakdown',
    'AggressiveBreakout', 'ConservativeBreakout', 'BounceZone', 'Bias'
]

def audit_profile_coverage(setups: List[TradeSetup], ticker: str, trading_day: date):
    found = {s.label for s in setups if s.label}
    missing = set(EXPECTED_PROFILES) - found
    if missing:
        logger.warning(f"Missing expected setups for {ticker} on {trading_day}: {sorted(missing)}")
    if len(setups) > len(EXPECTED_PROFILES):
        logger.warning(f"Extra setups detected: {len(setups)} > {len(EXPECTED_PROFILES)}")
