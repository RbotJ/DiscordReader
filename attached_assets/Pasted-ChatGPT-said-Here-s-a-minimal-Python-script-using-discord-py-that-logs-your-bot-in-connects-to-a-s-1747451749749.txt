ChatGPT said:
Here’s a minimal Python script using discord.py that logs your bot in, connects to a specified channel, fetches the most recent message, prints its author and content, and then cleanly shuts down. You’ll need to replace YOUR_BOT_TOKEN and CHANNEL_ID with your bot’s token and the target channel’s ID.

python
Copy
Edit
import discord
import asyncio

# 1. Enable the messages intent
intents = discord.Intents.default()
intents.messages = True

# 2. Create the client
client = discord.Client(intents=intents)

# 3. Set your target channel ID here
CHANNEL_ID = 123456789012345678  # ← replace with your channel’s ID

@client.event
async def on_ready():
    print(f"✅ Logged in as {client.user} (ID: {client.user.id})")
    
    # 4. Retrieve the channel object
    channel = client.get_channel(CHANNEL_ID)
    if channel is None:
        print(f"❌ Channel with ID {CHANNEL_ID} not found.")
        await client.close()
        return

    # 5. Fetch the latest message (limit=1)
    #    history() returns an AsyncIterator
    async for msg in channel.history(limit=1):
        print(f"📝 Latest message in #{channel.name}:")
        print(f"  Author:  {msg.author}")
        print(f"  Content: {msg.content}")
        break

    # 6. Cleanly logout the bot
    await client.close()

# 7. Run the bot
client.run("YOUR_BOT_TOKEN")
How it works:

Intents: Discord now requires you to explicitly enable “message” intents.

Client setup: We instantiate a discord.Client with those intents.

Channel lookup: client.get_channel(ID) grabs the channel object.

Fetching history: channel.history(limit=1) streams the last message.

Output: We print the author and content to the console.

Shutdown: After retrieving, we close the connection.

Note:

Install the library with pip install discord.py.

Make sure your bot has the “Read Message History” permission on that channel.

If you need continuous monitoring, you could move the history-fetch into a command or loop rather than closing the bot immediately.