2. Make Bot Startup Optional
Current State: Bot always starts unconditionally (line 298: start_discord_bot_background(app))
Proposed: Environment flag control

Benefits:

Allows running app without Discord bot in CI/testing
Better control for different deployment environments
Prevents bot startup errors from breaking the entire app
Implementation: Add environment check before bot startup
Impact: Medium - improves deployment flexibility

3. Separate SocketIO Instance
Current State: Global socketio = SocketIO() (line 25), initialized in create_app()
Proposed: Pass socketio instance as parameter

Benefits:

Reduces global state coupling
Improves testability - can inject mock socketio
Better dependency injection pattern
Cleaner separation of concerns
Implementation: Modify create_app() signature and callers
Impact: Medium - improves code architecture and testability

4. Environment Validation
Current State: Individual checks scattered throughout (e.g., lines 247-248 for Alpaca)
Proposed: Centralized environment validation

Benefits:

Early detection of configuration issues
Clear visibility of required vs optional environment variables
Prevents runtime failures due to missing config
Better error reporting
Current Missing Variables:

DATABASE_URL (required but not validated)
DISCORD_BOT_TOKEN (checked later in bot startup)
SESSION_SECRET (has fallback but should be explicit)
Impact: High - prevents configuration-related runtime failures

5. Use importlib for Dynamic Imports
Current State: Using __import__ in some places, direct imports with try/catch in others
Proposed: Standardize on importlib.import_module

Benefits:

More explicit and readable than __import__
Better error handling and debugging
Standard Python 3 approach
Avoids potential edge cases with __import__
Impact: Low-Medium - cleaner code, better error handling

Overall Assessment
Highest Priority Improvements:

Environment Validation - Prevents runtime failures
Blueprint Consolidation - Major code cleanup and maintainability
Medium Priority:
3. Optional Bot Startup - Improves deployment flexibility

SocketIO Separation - Better architecture
Lower Priority:
5. importlib Usage - Code quality improvement

Current Issues to Address:

LSP errors in lines 255, 272-273, 302 should be fixed during refactoring
Missing model imports causing warnings
Type safety improvements needed for API configurations
All suggested improvements are valid and would significantly improve the codebase quality, maintainability, and deployment flexibility. The blueprint consolidation alone would reduce the file size by approximately 30% while making it much easier to manage.