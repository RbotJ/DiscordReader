✅ Current Working Architecture
🧠 You Already Have:
features/parsing/parser.py as the main orchestrator

features/parsing/aplus_parser.py as the only valid strategy parser

ParsedSetupDTO / ParsedLevelDTO returned from parser

Trading day extraction done correctly (now merged in both parsers)

Section splitting by ticker, reducing false positives

Proper fallback to EST if date missing

You’re in good shape here.

❌ What’s Redundant or Risky
🚨 parser.py fallback logic
You're allowing fallback to:

python
Copy
Edit
_parse_ticker_setup(...)  # generic regex-based
This means if aplus_parser.validate_message() fails (e.g., typo in the header), it routes through ambiguous generic parsing.

🔧 Fix:
Instead of falling back, raise a hard failure:

python
Copy
Edit
if not aplus_parser.validate_message(content):
    raise ValueError(f"Message {message_id} is not a valid A+ setup format.")
❌ features/setups/service.py::parse_message_content()
You don’t need two sources of truth. All parsing should be done through MessageParser (and inside it, the APlusMessageParser).

🔧 Fix:
Delete or fully refactor this into:

python
Copy
Edit
SetupService.store_parsed_setups(setups: List[ParsedSetupDTO], ...)
🎯 Action Plan
1. Enforce A+ Format
In parser.py, rewrite this block:

python
Copy
Edit
if aplus_parser.validate_message(content):
    ...
else:
    # Remove this:
    # fallback to generic parsing
    # Replace with:
    raise ValueError(f"Invalid format: message {message_id} does not match A+ pattern")
2. Unify Date Handling
You're already using extract_trading_day() and normalize_timestamp_to_est() — excellent.
Now ensure downstream (e.g., store_parsed_message) uses the trading_day passed from parser.py.

3. Delete or Refactor /setups/service.py
Keep only logic related to:

DB writing: store_parsed_setups(...)

Updating status or metrics

NO text parsing should remain here.

4. Drop Legacy Parsers
Delete:

enhanced_parser.py

legacy_parser.py

multi_parser.py

Move to archive/ or kill them with Git history.

🧩 Final Integration Suggestion
🔁 One Entry Point: process_discord_message
python
Copy
Edit
class MessageProcessingService:
    def process_discord_message(self, raw_message: dict):
        parser = MessageParser()
        result = parser.parse_message_to_setups(raw_message)
        if not result["success"]:
            raise ValueError(f"Parsing failed for message {result['message_id']}")
        SetupService().store_parsed_setups(result["setups"], result["trading_day"])
This makes your processing logic clean and testable.