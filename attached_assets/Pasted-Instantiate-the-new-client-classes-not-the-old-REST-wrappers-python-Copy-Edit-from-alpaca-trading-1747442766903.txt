Instantiate the new client classes, not the old REST wrappers.

python
Copy
Edit
from alpaca.trading.client import TradingClient
from alpaca.data import StockDataClient

trading_client = TradingClient(API_KEY, API_SECRET, paper=True)
data_client    = StockDataClient(API_KEY, API_SECRET)
– TradingClient.get_account(), get_all_positions(), and get_all_orders() replace the old REST().get_account(), list_positions(), etc. 
Alpaca

Use the modern request classes for market-data calls. For a latest quote, you’d do:

python
Copy
Edit
from alpaca.data.requests import StockLatestQuoteRequest

def get_latest_quote(symbol: str):
    req   = StockLatestQuoteRequest(symbol_or_symbols=symbol)
    resp  = data_client.get_stock_latest_quote(req)
    return resp[symbol]._raw
rather than tree-hacking your own HTTP calls or using deprecated methods 
Alpaca

Example features/alpaca/client.py
python
Copy
Edit
import os
from alpaca.trading.client import TradingClient
from alpaca.data import StockDataClient
from alpaca.data.requests import StockLatestQuoteRequest

trading_client: TradingClient = None
data_client: StockDataClient    = None

def initialize_clients() -> bool:
    global trading_client, data_client
    key    = os.getenv("APCA_API_KEY")
    secret = os.getenv("APCA_API_SECRET_KEY")
    trading_client = TradingClient(key, secret, paper=True)
    data_client    = StockDataClient(key, secret)
    return bool(trading_client and data_client)

def get_account_info() -> dict:
    account = trading_client.get_account()
    return account._raw

def get_positions() -> list[dict]:
    return [p._raw for p in trading_client.get_all_positions()]

def get_open_orders() -> list[dict]:
    return [o._raw for o in trading_client.get_all_orders(status="open")]

def get_latest_quote(symbol: str) -> dict:
    req   = StockLatestQuoteRequest(symbol_or_symbols=symbol)
    resp  = data_client.get_stock_latest_quote(req)
    return resp[symbol]._raw
With that in place, your Flask routes will be invoking the current alpaca-py methods under the hood, and you’ll avoid any surprises from deprecated endpoints.