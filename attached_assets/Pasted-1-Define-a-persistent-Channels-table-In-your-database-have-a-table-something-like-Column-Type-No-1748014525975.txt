1. Define a persistent Channels table
In your database, have a table something like:

Column	Type	Notes
guild_id	BIGINT	Discord guild (server) ID
channel_id	BIGINT	Discord channel ID
name	VARCHAR	Channel name (e.g. “general”)
type	VARCHAR	“text”, “voice”, etc.
is_listen	BOOLEAN	Admin‐set flag for “listen”
is_announce	BOOLEAN	Admin‐set flag for “announce”
last_seen	TIMESTAMP	When you last saw this channel on Discord

You can add whatever metadata you need for your UI (e.g. position, topic, permissions, etc.).

2. Write a “sync_channels” routine
This function pulls every guild’s channel list and upserts into your DB:

python
Copy
Edit
from datetime import datetime
from sqlalchemy import select, insert, update
from your_app.models import Channel  # SQLAlchemy model
from discord import TextChannel

async def sync_channels(bot):
    now = datetime.utcnow()
    for guild in bot.guilds:
        # Fetch fresh list of text channels
        for ch in guild.text_channels:  
            # Upsert logic
            stmt = select(Channel).where(
                Channel.guild_id==guild.id,
                Channel.channel_id==ch.id
            )
            existing = await your_db.fetch_one(stmt)
            if existing:
                # update name/type/last_seen if changed
                await your_db.execute(
                    update(Channel)
                    .where(Channel.guild_id==guild.id, Channel.channel_id==ch.id)
                    .values(name=ch.name, type=ch.type.name, last_seen=now)
                )
            else:
                # insert new channel
                await your_db.execute(
                    insert(Channel).values(
                        guild_id=guild.id,
                        channel_id=ch.id,
                        name=ch.name,
                        type=ch.type.name,
                        is_listen=False,
                        is_announce=False,
                        last_seen=now
                    )
                )
    # Optionally mark channels missing since last run as inactive
    cutoff = now  # or now - 1 day
    await your_db.execute(
        update(Channel)
        .where(Channel.last_seen < cutoff)
        .values(active=False)
    )
Upsert: you detect if a channel exists, then update or insert.

last_seen: helps you detect deleted channels and flag them inactive.

