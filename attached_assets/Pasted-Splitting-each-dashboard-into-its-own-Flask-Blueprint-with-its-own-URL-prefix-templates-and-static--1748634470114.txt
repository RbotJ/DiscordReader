Splitting each dashboard into its own Flask Blueprint—with its own URL prefix, templates and static assets—is by far the cleanest way to keep them isolated and easy to edit in Replit. Here’s a quick recipe to get you started for slices 1–3:

1. Create a Blueprint for the Discord-Bot dashboard
python
Copy
Edit
# features/discord_bot/dashboard.py
from flask import Blueprint, render_template, jsonify
from datetime import datetime

discord_bp = Blueprint('discord_dashboard', __name__,
                       template_folder='templates/discord',
                       static_folder='static/discord',
                       url_prefix='/dashboard/discord')

@discord_bp.route('/')
def overview():
    # you could also pull these from a metrics service
    status = get_bot_status()       # e.g. connected/disconnected
    last_ready = get_last_ready()   # timestamp
    return render_template('overview.html',
                           status=status,
                           last_ready=last_ready)

@discord_bp.route('/metrics.json')
def metrics():
    return jsonify({
        'uptime_seconds': get_uptime_seconds(),
        'msg_rate_per_min': get_msg_rate(),
        'error_rate_per_hour': get_error_rate(),
    })
Place your Jinja2 templates in features/discord_bot/templates/discord/ and any JS/CSS in features/discord_bot/static/discord/.

2. Create a Blueprint for the Discord-Channels dashboard
python
Copy
Edit
# features/discord_channels/dashboard.py
from flask import Blueprint, render_template, jsonify
from features.discord_channels.channel_manager import ChannelManager

channels_bp = Blueprint('channels_dashboard', __name__,
                        template_folder='templates/channels',
                        static_folder='static/channels',
                        url_prefix='/dashboard/channels')

@channels_bp.route('/')
def overview():
    stats = ChannelManager().get_sync_stats()
    return render_template('overview.html', stats=stats)

@channels_bp.route('/metrics.json')
def metrics():
    stats = ChannelManager().get_sync_stats()
    return jsonify(stats)
3. Create a Blueprint for the Ingestion dashboard
python
Copy
Edit
# features/ingestion/dashboard.py
from flask import Blueprint, render_template, jsonify
from features.ingestion.service import IngestionService
from common.events.bus import event_bus

ingest_bp = Blueprint('ingest_dashboard', __name__,
                      template_folder='templates/ingest',
                      static_folder='static/ingest',
                      url_prefix='/dashboard/ingestion')

@ingest_bp.route('/')
def overview():
    return render_template('overview.html')

@ingest_bp.route('/metrics.json')
def metrics():
    svc = IngestionService(...)  # pass your real dependencies
    return jsonify({
        'realtime_count': svc.get_realtime_count_last_minute(),
        'batch_count':    svc.get_batch_count_last_minute(),
        'validation_failures': svc.get_validation_failure_count(),
    })
4. Register them in your main app
In your app.py (or equivalent):

python
Copy
Edit
from features.discord_bot.dashboard     import discord_bp
from features.discord_channels.dashboard import channels_bp
from features.ingestion.dashboard       import ingest_bp

def create_app():
    app = Flask(__name__)
    # … your existing setup …
    app.register_blueprint(discord_bp)
    app.register_blueprint(channels_bp)
    app.register_blueprint(ingest_bp)
    return app
Now you’ll have:

/dashboard/discord

/dashboard/channels

/dashboard/ingestion

Each with its own templates, routes, and static files. This isolation makes editing in Replit trivial—you can even swap out one dashboard without touching the others.