from datetime import date
import json
import logging
from alpaca.data.historical import OptionHistoricalDataClient
from alpaca.data.requests import OptionChainRequest
from alpaca.data.enums import ContractType, OptionsFeed
from common.redis_utils import get_redis_client

logger = logging.getLogger(__name__)

OPTIONS_CACHE_PREFIX = "options_chain_"
CACHE_TTL = 900  # 15 minutes

class OptionsChainFetcher:
    def __init__(self, api_key: str, api_secret: str):
        self.client = OptionHistoricalDataClient(api_key, api_secret)
        self.redis = get_redis_client()

    def get_chain(
        self,
        symbol: str,
        expiration: str | date = None,
        strike_price: float = None,
        side: str = None,
        force_refresh: bool = False,
    ) -> list[dict]:
        cache_key = (
            f"{OPTIONS_CACHE_PREFIX}{symbol}_"
            f"{expiration or 'all'}_"
            f"{strike_price or 'all'}_"
            f"{side or 'all'}"
        )
        if not force_refresh and self.redis:
            cached = self.redis.get(cache_key)
            if cached:
                try:
                    return json.loads(cached)
                except Exception as e:
                    logger.error(f"Cache parse error: {e}")

        # Build the request
        req = OptionChainRequest(
            underlying_symbol=symbol,
            expiration_date=expiration,
            strike_price_gte=strike_price,
            strike_price_lte=strike_price,
            type=(
                ContractType.CALL
                if side and side.lower() == "call"
                else ContractType.PUT
                if side and side.lower() == "put"
                else None
            ),
            feed=OptionsFeed.OPRA,  # or indicative if you don’t have OPRA access
        )

        # Fetch and format
        try:
            raw_chain = self.client.get_option_chain(req)
            formatted = self._format_options_chain(raw_chain)
            if self.redis:
                self.redis.setex(cache_key, CACHE_TTL, json.dumps(formatted))
            return formatted

        except Exception as e:
            logger.error(f"Error fetching options chain for {symbol}: {e}")
            return []

    # … rest of class …

