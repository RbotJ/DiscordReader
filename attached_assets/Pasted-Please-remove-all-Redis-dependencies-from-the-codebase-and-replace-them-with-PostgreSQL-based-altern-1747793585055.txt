Please remove all Redis dependencies from the codebase and replace them with PostgreSQL-based alternatives using our existing database.

Refactor the following Redis components:

1. **Event Publishing / PubSub (EventChannels + RedisEventManager)**:
   - Replace Redis pub/sub with an `event_bus` table in PostgreSQL:
     ```sql
     CREATE TABLE event_bus (
       id SERIAL PRIMARY KEY,
       event_type TEXT NOT NULL,
       channel TEXT NOT NULL,
       payload JSONB,
       created_at TIMESTAMPTZ DEFAULT now()
     );
     ```
   - Write a helper in `common/events.py` with:
     - `publish_event(channel, event_type, payload)` → inserts a row
     - `poll_events(channels, since_id)` → queries new rows for a listener
   - Replace all `publish_event(...)` calls with this SQL-based publisher.
   - In `features/strategy/candle_detector.py`, replace Redis subscription logic with async polling on `event_bus`.

2. **Price Update Cache**:
   - Replace Redis price deduplication with a temporary `price_cache` table:
     ```sql
     CREATE UNLOGGED TABLE price_cache (
       symbol TEXT PRIMARY KEY,
       last_price NUMERIC,
       updated_at TIMESTAMPTZ
     );
     ```
   - Add upsert logic to prevent duplicates, and check recent prices before publishing.

3. **Setup/Signal/Position Updates**:
   - Redirect all setup, signal, and position events (e.g., `setup.received`, `signal.triggered`) to the same `event_bus` mechanism above.

4. **Remove**:
   - `common/redis_utils.py`
   - Any Redis connection logic in startup scripts (`start_redis.sh`, `start_services.sh`)
   - Redis client calls in `features/*/*`

Keep fallback-friendly logic where needed, but primary behavior should now rely fully on PostgreSQL.

Use async SQL if possible (e.g. `asyncpg` or your current DB wrapper).

Maintain the vertical-slice architecture—scoped updates per feature slice:

- `/features/market/price_monitor.py`
- `/features/strategy/candle_detector.py`
- `/features/setups/event_publisher.py`
- `/features/discord/message_publisher.py`

Ensure `common/events.py` can be used across all slices for publishing and polling.

Confirm Redis is completely removed, and that all affected features work using PostgreSQL-backed event and cache systems instead.
