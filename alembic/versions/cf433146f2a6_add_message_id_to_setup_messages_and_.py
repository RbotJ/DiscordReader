"""Add message_id to setup_messages and setup_message_id to ticker_setups

Revision ID: cf433146f2a6
Revises: 
Create Date: 2025-05-23 20:21:03.588519

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cf433146f2a6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, add the new columns to setup_messages and ticker_setups
    op.add_column('setup_messages', sa.Column('message_id', sa.String(length=50), nullable=True))
    op.add_column('setup_messages', sa.Column('parsed_data', sa.JSON(), nullable=True))
    
    # Add new columns to ticker_setups
    op.add_column('ticker_setups', sa.Column('setup_message_id', sa.Integer(), nullable=True))
    op.add_column('ticker_setups', sa.Column('category', sa.String(length=50), nullable=True))
    op.add_column('ticker_setups', sa.Column('direction', sa.String(length=10), nullable=True))
    op.add_column('ticker_setups', sa.Column('price_level', sa.Float(), nullable=True))
    op.add_column('ticker_setups', sa.Column('target1', sa.Float(), nullable=True))
    op.add_column('ticker_setups', sa.Column('target2', sa.Float(), nullable=True))
    op.add_column('ticker_setups', sa.Column('stop_loss', sa.Float(), nullable=True))
    op.add_column('ticker_setups', sa.Column('status', sa.String(length=20), nullable=False, server_default='active'))
    
    # Create the new foreign key relationship
    op.create_foreign_key('ticker_setups_setup_message_id_fkey', 'ticker_setups', 'setup_messages', ['setup_message_id'], ['id'], ondelete='CASCADE')
    
    # Now we can safely drop constraints and cleanup
    op.drop_constraint('ticker_setups_setup_id_fkey', 'ticker_setups', type_='foreignkey')
    
    
    # Add index for better performance
    op.create_index(op.f('ix_ticker_setups_symbol'), 'ticker_setups', ['symbol'], unique=False)
    
    # Clean up the old setup_id column (keeping the setups table for now)
    op.drop_column('ticker_setups', 'setup_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('ticker_setups', sa.Column('setup_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'ticker_setups', type_='foreignkey')
    op.create_foreign_key(op.f('ticker_setups_setup_id_fkey'), 'ticker_setups', 'setups', ['setup_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_ticker_setups_symbol'), table_name='ticker_setups')
    op.alter_column('ticker_setups', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('ticker_setups', 'status')
    op.drop_column('ticker_setups', 'stop_loss')
    op.drop_column('ticker_setups', 'target2')
    op.drop_column('ticker_setups', 'target1')
    op.drop_column('ticker_setups', 'price_level')
    op.drop_column('ticker_setups', 'direction')
    op.drop_column('ticker_setups', 'category')
    op.drop_column('ticker_setups', 'setup_message_id')
    op.add_column('signals', sa.Column('trigger_value', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('signals', sa.Column('triggered_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('signals', sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.alter_column('signals', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('signals', 'comparison',
               existing_type=sa.Enum('ABOVE', 'BELOW', 'NEAR', 'RANGE', name='comparisontypeenum'),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.alter_column('signals', 'aggressiveness',
               existing_type=sa.Enum('NONE', 'LOW', 'MEDIUM', 'HIGH', 'AGGRESSIVE', 'CONSERVATIVE', name='aggressivenessenum'),
               type_=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('signals', 'category',
               existing_type=sa.Enum('BREAKOUT', 'BREAKDOWN', 'REJECTION', 'BOUNCE', name='signalcategoryenum'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.drop_column('signals', 'trigger')
    op.alter_column('setup_messages', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('setup_messages', 'parsed_data')
    op.drop_column('setup_messages', 'message_id')
    op.add_column('biases', sa.Column('flip_price_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('biases', sa.Column('flip_direction', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.alter_column('biases', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('biases', 'condition',
               existing_type=sa.Enum('ABOVE', 'BELOW', 'NEAR', 'RANGE', name='comparisontypeenum'),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.alter_column('biases', 'direction',
               existing_type=sa.Enum('BULLISH', 'BEARISH', name='biasdirectionenum'),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.create_table('watchlist',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('added_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('watchlist_pkey')),
    sa.UniqueConstraint('symbol', name=op.f('watchlist_symbol_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('options_contracts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('underlying', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('expiration_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('strike', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('option_type', sa.VARCHAR(length=4), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('bid', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ask', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('volume', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('open_interest', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('implied_volatility', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('delta', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('gamma', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('theta', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('vega', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rho', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('options_contracts_pkey'))
    )
    op.create_index(op.f('ix_options_contracts_underlying'), 'options_contracts', ['underlying'], unique=False)
    op.create_index(op.f('ix_options_contracts_expiration_date'), 'options_contracts', ['expiration_date'], unique=False)
    op.create_table('positions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('avg_entry_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('side', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('market_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cost_basis', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unrealized_pl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unrealized_plpc', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('current_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lastday_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('change_today', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('positions_pkey'))
    )
    op.create_index(op.f('ix_positions_symbol'), 'positions', ['symbol'], unique=False)
    op.create_table('orders',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('alpaca_order_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('client_order_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('signal_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('symbol', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('side', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('time_in_force', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('limit_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('stop_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('filled_qty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('filled_avg_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['signal_id'], ['signals.id'], name=op.f('orders_signal_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('orders_pkey'))
    )
    op.create_index(op.f('ix_orders_symbol'), 'orders', ['symbol'], unique=False)
    op.create_table('price_triggers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('comparison', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('trigger_value', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('signal_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('triggered_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['signal_id'], ['signals.id'], name=op.f('price_triggers_signal_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('price_triggers_pkey'))
    )
    op.create_index(op.f('ix_price_triggers_symbol'), 'price_triggers', ['symbol'], unique=False)
    op.create_table('event_bus',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('channel', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('event_bus_pkey'))
    )
    op.create_index(op.f('event_bus_created_at_idx'), 'event_bus', ['created_at'], unique=False)
    op.create_index(op.f('event_bus_channel_idx'), 'event_bus', ['channel'], unique=False)
    op.create_table('price_cache',
    sa.Column('symbol', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('last_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('symbol', name=op.f('price_cache_pkey'))
    )
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('meta_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    op.create_table('setups',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('raw_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('setups_pkey'))
    )
    op.create_table('market_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('previous_close', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('volume', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('market_data_pkey')),
    sa.UniqueConstraint('symbol', 'timestamp', name=op.f('uix_market_data_symbol_timestamp'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_market_data_symbol'), 'market_data', ['symbol'], unique=False)
    # ### end Alembic commands ###
